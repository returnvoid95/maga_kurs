@page "/EditPerson/{id:int}"
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Редактировать историческую личность</PageTitle>

<h1>Редактировать историческую личность</h1>

<div class="person-form">
    <section>
        <label for="name">Имя:</label>
        <input class="form-control" type="text" id="name" @bind="person.Name" />
    </section>

    <section>
        <label for="description">Описание:</label>
        <textarea class="form-control" id="description" @bind="person.Description"></textarea>
    </section>

    <section>
        <label for="dateOfBirth">Дата рождения:</label>
        <input class="form-control" type="date" id="dateOfBirth" @bind="person.DateOfBirth" />
    </section>

    <section>
        <label for="dateOfDeath">Дата смерти:</label>
        <input class="form-control" type="date" id="dateOfDeath" @bind="person.DateOfDeath" />
    </section>

    <section>
        <label for="timePeriodId">Исторический период:</label>
        <select class="form-select" id="timePeriodId" @bind="person.TimePeriodName">
            <option value="">Выберите период</option>
            @foreach (var period in TimePeriods)
            {
                <option value="@period.id">@period.name</option>
            }
        </select>
    </section>

    <section>
        <h4>Ссылки на дополнительные материалы</h4>
        <button class="btn btn-secondary" type="button" @onclick="AddUrl">Добавить ссылку</button>
        <ul>
            @foreach (var url in person.Urls)
            {
                <li>
                    <InputText @bind-Value="url.Name" placeholder="Название ссылки" />
                    <InputText @bind-Value="url.Url" placeholder="URL" />
                    <button class="btn btn-danger" type="button" @onclick="() => RemoveUrl(url)">Удалить</button>
                </li>
            }
        </ul>
    </section>
    
    <section>
        <h4>Регионы</h4>
        <InputSelect class="form-select" @bind-Value="selectedRegionId" @onchange="OnRegionChange">
            <option value="">Выберите регион</option>
            @foreach (var region in availableRegions)
            {
                <option value="@region.id">@region.name</option>
            }
        </InputSelect>
        <button class="btn btn-secondary" type="button" @onclick="AddRegion">Добавить регион</button>
        <ul>
            @foreach (var region in person.Regions)
            {
                <li>
                    @region.name
                    <button class="btn btn-danger" type="button" @onclick="() => RemoveRegion(region)">Удалить</button>
                </li>
            }
        </ul>
    </section>
    
    <section>
        <button class="btn btn-primary" @onclick="UpdatePerson">Обновить</button>
        <button class="btn btn-secondary" @onclick="NavigateBack">Назад</button>
    </section>
</div>

<style>
    .person-form {
        width: 500px;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding-block-end: 3rem;
    }

    input[type="date"] {
        width: 150px;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    private PersonResponceModel person = new PersonResponceModel{
        Urls = new List<Urls>(),
        Regions = new List<iIdName>()
    };
    private List<iIdName> TimePeriods = new List<iIdName>();
    private List<iIdName> availableRegions = new List<iIdName>();
    private int? selectedRegionId;

    protected override async Task OnInitializedAsync()
    {  availableRegions = await GetRegions();
        await LoadTimePeriods();
        await LoadPerson();
    }

    private async Task LoadTimePeriods()
    {
        var response = await Http.GetAsync("http://213.110.228.252/Spr/GetHistoryPeriods");
        if (response.IsSuccessStatusCode)
        {
            var body = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(body);
            TimePeriods = responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList();
        }
    }
    private async Task<List<iIdName>> GetRegions()
    {
        var response = await Http.GetAsync("http://213.110.228.252/Spr/GetRegions");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }
     private void AddUrl()
    {
        person.Urls.Add(new Urls());
    }

    private void RemoveUrl(Urls url)
    {
        person.Urls.Remove(url);
    }

    private void AddRegion()
    {
        if (selectedRegionId.HasValue)
        {
            var regionToAdd = availableRegions.FirstOrDefault(r => r.id == selectedRegionId);
            if (regionToAdd != null && !person.Regions.Any(r => r.id == regionToAdd.id))
            {person.Regions.Add(regionToAdd);
            }
        }
    }

    private void RemoveRegion(iIdName region)
    {
        person.Regions.Remove(region);
    }

    private void OnRegionChange(ChangeEventArgs e)
    {
        selectedRegionId = int.TryParse(e.Value.ToString(), out var id) ? id : (int?)null;
    }

    private async Task LoadPerson()
    {
        var response = await Http.GetAsync($"http://213.110.228.252/HistoryPersons/Get/{Id}");
        if (response.IsSuccessStatusCode)
        {
            var body = await response.Content.ReadAsStringAsync();
                  
 var responseModel = JsonConvert.DeserializeObject<PersonMassResponceModel>(body);
        person = responseModel.data;

        }
    }

    private async Task UpdatePerson()
    {
        var model = JsonConvert.SerializeObject(person);
        var data = new StringContent(model, Encoding.UTF8, "application/json");
        var response = await Http.PutAsync($"http://213.110.228.252/HistoryPersons/Update/{Id}", data);
        
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/HistoryPersons");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/HistoryPersons");
    }

     
}