@page "/Admin"
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using System.Text
@using System.Reflection
@inject HttpClient Http
@inject NavigationManager NavigationManager
@*@page "/protected"
@attribute [Authorize]*@



<PageTitle>Admin</PageTitle>

<h1>Администраторская</h1>

<p>.</p>

<div class="filter-container">
    <input type="text" @bind="RequestModel.Filter.Id" placeholder="Id" />
    <input type="text" @bind="RequestModel.Filter.LastName" placeholder="Фамилия" />
     <input type="text" @bind="RequestModel.Filter.FirstName" placeholder="Имя" />
     <input type="text" @bind="RequestModel.Filter.SecondName" placeholder="Отчество" />

    <select @bind="RequestModel.Filter.Sex">
        <option value="">Все</option>
        <option value="true">Только мужчины</option>
        <option value="false">Только Женщины</option>
    </select>

    <input type="text" @bind="RequestModel.Filter.Email" placeholder="Логин" />

    <select @bind="RequestModel.Filter.IsStaff">
        <option value="">Все</option>
        <option value="true">Только сотрудники</option>
        <option value="false">Не сотрудники</option>
    </select>

    <select @bind="RequestModel.Filter.IsConfrimed">
        <option value="">Все</option>
        <option value="true">Подтвержденные учетные записи</option>
        <option value="false">Не подтвержденные учетные записии</option>
    </select>

    
    
    <button class="btn btn-primary" @onclick="ApplyFilters">Искать</button>
    <button class="btn btn-secondary" @onclick="ResetFilters">Сбросить фильтры</button>
</div>

@if ( Users == null)
{
    <p><em>Loading...</em></p>
}
else if (Users.Count==0) {
    <p><em>К сожалению по вашему запросу нет данных</em></p>
    
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th @onclick="() => SortColumn(1)">Id</th>
            <th @onclick="() => SortColumn(2)">Фамилия</th>
            <th @onclick="() => SortColumn(3)">Имя</th>
            <th @onclick="() => SortColumn(4)">Отчество</th>
            <th @onclick="() => SortColumn(5)">Пол</th>
            <th @onclick="() => SortColumn(6)">Логин</th>
            <th @onclick="() => SortColumn(7)">Является ли сотрудником</th>
            <th @onclick="() => SortColumn(8)">Подтвержден ли аккаунт</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var person in  Users)
            {
               <tr @onclick="() => SelectUser(person.Id,person.IsConfrimed)" @ondblclick="() => OpenPersonPage((int)person.Id)" class="@(IsUserSelected(person.Id) ? "table-primary" : "")">
    <td>@person.Id</td>
    <td>@person.LastName</td>
    <td>@person.FirstName</td>
    <td>@person.SecondName</td>
    <td>@(@person.Sex ? "Мужской" : "Женский")</td>
    <td>@person.Email</td>
            
   <td> @(person.IsStaff ? "Да" : "Нет")</td>
    <td> @(person.IsConfrimed ? "Да" : "Нет")</td>
                    
                </tr>
            }
        </tbody>
    </table>
    <style>
    .table-primary {
        background-color: #007bff;
        color: white;
    }
</style>

    <div class="button-group">
        <button class="btn btn-primary" @onclick="AddUser">Добавить нового пользователя</button>
        <button class="btn btn-secondary" @onclick="EditUser">Редактировать существующего пользователя</button>
        <button class="btn btn-danger" @onclick="DeleteUser">Удалить пользователя</button>
        <button class="btn btn-warning" @onclick="ResetPassword">Сбросить пароль</button>
        <button class="btn btn-success" @onclick="ConfirmAccount">Утвердить учетную запись</button>
    </div>
}

@code {

    private string currentSortColumn = "Id"; 
    //private bool isAscending = true; 
    private List<UserResponceModel> Users;
    private int selectedUserId;
    private bool selectedUserIsConfrimed;
    private UserPortionRequest RequestModel = new UserPortionRequest();

    private async Task ApplyFilters()
    {
        await LoadUsers();
    }

    private void ResetFilters()
    {
        RequestModel = new UserPortionRequest(); // сбросить фильтры
        LoadUsers();
    }
    private void OpenPersonPage(int id)
    {
        NavigationManager.NavigateTo($"/User/{id}");
    }

    private async Task AddUser()
    {
        NavigationManager.NavigateTo("/AddUser"); 
    }

    private async Task EditUser()
    {
        if (selectedUserId != 0)
        {
            NavigationManager.NavigateTo($"/EditUser/{selectedUserId}"); 
        }
    }

    private async Task DeleteUser()
    {
        if (selectedUserId != 0)
        {
            var response = await Http.GetAsync($"https://localhost:7019/Administration/Delete/{selectedUserId}");
            if (response.IsSuccessStatusCode)
            {
                // Обновите список пользователей после удаления
                await LoadUsers();
            }
        }
    }

    private async Task ResetPassword()
    {
        if (selectedUserId != 0)
        {
            var response = await Http.GetAsync($"https://localhost:7019/Administration/SetDefaultPassword/{selectedUserId}");
            if (response.IsSuccessStatusCode)
            {
                // Обновите список пользователей после сброса пароля
                await LoadUsers();
            }
        }
    }

    private async Task ConfirmAccount()
    {
        if (selectedUserId != 0)
        {
            var response = await Http.GetAsync($"https://localhost:7019/Administration/Confrim/{selectedUserId}/{selectedUserIsConfrimed}");
            if (response.IsSuccessStatusCode)
            {
                // Обновите список пользователей после подтверждения
                await LoadUsers();
            }
        }
    }
    private void SelectUser(int userId,bool IsConfrimed)
    {
        selectedUserId = userId;
        selectedUserIsConfrimed = !IsConfrimed;
    }

    private bool IsUserSelected(int userId)
    {
        return selectedUserId == userId;
    }
    private async Task LoadUsers()
    {
        var postbody = RequestModel;

        var model = JsonConvert.SerializeObject(postbody);
        var data = new StringContent(model, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync("https://localhost:7019/Administration/GetAllUsers", data);
        if (response.IsSuccessStatusCode)
        {
            var body = await response.Content.ReadAsStringAsync();
            var userMassResponse = JsonConvert.DeserializeObject<UserMassResponceModel>(body);
            Users = userMassResponse.data;
        }
    }

    protected override async Task OnInitializedAsync()
    {   RequestModel = new UserPortionRequest();
        await LoadUsers();
    }


    private async Task SortColumn(int columnId)
    {
        string columnName = "";
        switch (columnId)
        {
                case 1:columnName = "Id";
                break;
                case 2:columnName = "LastName";
                break;
                case 3:columnName = "FirstName";
                break;
                case 4:columnName = "SecondName";
                break;
                case 5:columnName = "Sex";
                break;
                case 6:columnName = "Login";
                break;
                case 7:columnName = "IsStaff";
                break;
                case 8:columnName = "IsConfrimed";
                break;
        }

        
        if (RequestModel.OrderBy == columnName)
        {
            RequestModel.OrderTo = !RequestModel.OrderTo; 
        }
        else
        {
            RequestModel.OrderBy = columnName; // Изменяем столбец сортировки
            RequestModel.OrderTo = true; // Сбрасываем направление на восходящее
        }

        await LoadUsers();
    }



    public class iIdName
    {
        public int id   { get; set; }
        public string name  { get; set; }

    }
    public class UserResponceModel {

        public int Id { get; set; }
        public string FirstName { get; set; }
        public string SecondName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public List<iIdName> Roles { get; set; }
        public bool IsStaff { get; set; }
        public bool Sex { get; set; }
        public bool IsConfrimed { get; set; }

    }




    public class UserMassResponceModel
    {
        public List<UserResponceModel> data { get; set; }
        public string total { get; set; }
        public string result { get; set; }
        public string error { get; set; }
        public string message { get; set; }
    }
    public class UsersFilter
    {
        public int? Id { get; set; }
        public string? FirstName { get; set; }
        public string? SecondName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public bool ? IsStaff { get; set; }
        public bool? Sex { get; set; }
        public bool? IsConfrimed { get; set; }




    }

    public class UserPortionRequest
    {

        public UsersFilter? Filter { get; set; }
        public string? OrderBy { get; set; }
        public bool OrderTo { get; set; }
        public UserPortionRequest()
        {
            OrderBy = "Id";
            OrderTo = true;
            Filter = new UsersFilter();
        }

    }
  
}
