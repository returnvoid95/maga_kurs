@page "/AddEvent"
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Добавить событие</h3>

<EditForm Model="newEvent" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <section class="event-form">
        <div class="flex-row">
            <label>Название:</label>
            <InputText class="form-control" @bind-Value="newEvent.Name" />
        </div>
        <div class="flex-row">
            <label>Описание:</label>
            <InputTextArea class="form-control" @bind-Value="newEvent.Description" Rows="5" />
        </div>
        <div class="flex-row">
            <label>Дата начала:</label>
            <div class="date-container">
                <InputDate class="form-control" @bind-Value="newEvent.StartedOn" />
            </div>
        </div>
        <div class="flex-row">
            <label>Дата завершения:</label>
            <div class="date-container">
                <InputDate class="form-control" @bind-Value="newEvent.EndedOn" />
            </div>
        </div>

        <div class="flex-row">
            <label>Исторический период:</label>
            <InputSelect class="form-select" @bind-Value="newEvent.TimePeriodIds">
                <option value="">Выберите исторический период</option>
                @foreach (var period in timePeriods)
                {
                    <option value="@period.id">@period.name</option>
                }
            </InputSelect>
        </div>

        <div class="flex-row">
            <label>Тип события:</label>
            <InputSelect class="form-select" @bind-Value="newEvent.Type">
                <option value="">Выберите тип события</option>
                @foreach (var eventType in eventTypes)
                {
                    <option value="@eventType.id">@eventType.name</option>
                }
            </InputSelect>
        </div>

        <div class="flex-row">
            <label>Значимость события:</label>
            <InputSelect class="form-select" @bind-Value="newEvent.Level">
                <option value="">Выберите значимость события</option>
                @foreach (var level in eventLevels)
                {
                    <option value="@level.id">@level.name</option>
                }
            </InputSelect>
        </div>

        <section>
            <h4>Ссылки на дополнительные материалы</h4>
            <button type="button" class="btn btn-secondary" @onclick="AddUrl">Добавить ссылку</button>
            <ul>
                @foreach (var url in newEvent.Urls)
                {
                    <li>
                        <InputText @bind-Value="url.Name" placeholder="Название ссылки" />
                        <InputText @bind-Value="url.Url" placeholder="URL" />
                        <button type="button" class="btn btn-danger" @onclick="() => RemoveUrl(url)">Удалить</button>
                    </li>
                }
            </ul>
        </section>

        <section>
            <h4>Регионы</h4>
            <InputSelect class="form-select" @bind-Value="selectedRegionId" @onchange="OnRegionChange">
                <option value="">Выберите регион</option>
                @foreach (var region in availableRegions)
                {
                    <option value="@region.id">@region.name</option>
                }
            </InputSelect>
            <button type="button" class="btn btn-secondary" @onclick="AddRegion">Добавить регион</button>
            <ul>
                @foreach (var region in newEvent.RegionIds)
                {
                    <li>
                        @region.name
                        <button type="button" class="btn btn-danger" @onclick="() => RemoveRegion(region)">Удалить</button>
                    </li>
                }
            </ul>
        </section>
        <div class="flex-row">
            <label>Широта:</label>
            <InputNumber class="form-control" @bind-Value="newEvent.XCoordiname" />
        </div>
        <div class="flex-row">
            <label>Долгота:</label>
            <InputNumber class="form-control" @bind-Value="newEvent.YCoordiname" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </div>
    </section>
</EditForm>

<style>
    .event-form {
        width: 600px;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding-block-end: 3rem;
    }

    input[type="date"] {
        max-width: 150px;
    }

    .flex-row {
        display: flex;
        gap: 1rem;
        justify-content: flex-start;
    }

    .flex-row > :first-child {
        width: 195px;
    }

    .flex-row > :last-child {
        flex: 1;
    }
</style>

@code {
    private EventRequestModel newEvent = new EventRequestModel
    {
        Urls = new List<Urls>(),
        RegionIds = new List<iIdName>()
    };

    private List<iIdName> timePeriods = new List<iIdName>();
    private List<iIdName> eventTypes = new List<iIdName>();
    private List<iIdName> eventLevels = new List<iIdName>();
    private List<iIdName> availableRegions = new List<iIdName>();
    private int? selectedRegionId;

    protected override async Task OnInitializedAsync()
    {
        timePeriods = await GetHistoryPeriods();
        eventTypes = await GetEventTypes();
        eventLevels = await GetEventLevels();
        availableRegions = await GetRegions();
    }

    private async Task<List<iIdName>> GetHistoryPeriods()
    {
        var response = await Http.GetAsync("http://213.110.228.252/Spr/GetHistoryPeriods");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }

    private async Task<List<iIdName>> GetEventTypes()
    {
        var response = await Http.GetAsync("http://213.110.228.252/Spr/GetEventTypes");
        if (response.IsSuccessStatusCode)
        { var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }

    private async Task<List<iIdName>> GetEventLevels()
    {
        var response = await Http.GetAsync("http://213.110.228.252/Spr/GetEventLevels");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }

    private async Task<List<iIdName>> GetRegions()
    {
        var response = await Http.GetAsync("http://213.110.228.252/Spr/GetRegions");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }

    private async Task HandleValidSubmit()
    {

        newEvent.Regions = newEvent.RegionIds.Select(e => e.id).ToList();
        var json = JsonConvert.SerializeObject(newEvent);
        var content = new StringContent(json, Encoding.GetEncoding("windows-1251"), "application/json");
        var response = await Http.PostAsync("http://213.110.228.252/Event/create", content);
        
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/HistoryEvents");
        }
        else
        {
            // Обработка ошибок
        }
    }

    private void AddUrl()
    {
        newEvent.Urls.Add(new Urls());
    }

    private void RemoveUrl(Urls url)
    {
        newEvent.Urls.Remove(url);
    }

    private void AddRegion()
    {
        if (selectedRegionId.HasValue)
        {
            var regionToAdd = availableRegions.FirstOrDefault(r => r.id == selectedRegionId);
            if (regionToAdd != null && !newEvent.RegionIds.Any(r => r.id == regionToAdd.id))
            {
                newEvent.RegionIds.Add(regionToAdd);
            }
        }
    }

    private void RemoveRegion(iIdName region)
    {
        newEvent.RegionIds.Remove(region);
    }

    private void OnRegionChange(ChangeEventArgs e)
    {
        selectedRegionId = int.TryParse(e.Value.ToString(), out var id) ? id : (int?)null;
    }

    public class EventRequestModel
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public DateTime? StartedOn { get; set; }
        public DateTime? EndedOn { get; set; }
        public int? TimePeriodIds { get; set; }
        public int? Type { get; set; }
        public int? Level { get; set; }
        public List<Urls> Urls { get; set; }
        public List<iIdName> RegionIds { get; set; }
        public List<int> Regions { get; set; }
        public double? XCoordiname { get; set; }
        public double? YCoordiname { get; set; }

    }


         public class SprResponceModel
{
    public Dictionary<int,string> data { get; set; }
    public string total { get; set; }
    public string result { get; set; }
    public string error { get; set; }
    public string message { get; set; }
}

    public class iIdName
    {
        public int id   { get; set; }
        public string name  { get; set; }

    }

     public class ShortUserData
    { 
    public int Id { get; set; } 
    public string FirstName { get; set; }
    public string SecondName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }

    }

       public class Urls
    { public int? Id { get; set; }
        public string Url { get; set; }
        public string Name { get; set; }
    }
     public class EventComment {
    public int ? Id { get; set; }
    public string Text { get; set; }
    public string CommentAuthorEmail { get; set; }

    
    }
}
