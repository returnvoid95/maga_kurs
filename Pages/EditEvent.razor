@page "/EditEvent/{id:int}"
@using MAgistrFront
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Редактировать событие</h3>

<EditForm Model="eventToEdit" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Название:</label>
        <InputText @bind-Value="eventToEdit.Name" />
    </div>
    <div>
        <label>Описание:</label>
        <InputTextArea @bind-Value="eventToEdit.Description" Rows="5" />
    </div>
    <div>
        <label>Дата начала:</label>
        <InputDate @bind-Value="eventToEdit.StartedOn" />
    </div>
    <div>
        <label>Дата завершения:</label>
        <InputDate @bind-Value="eventToEdit.EndedOn" />
    </div>
    
      <div>
        <label>Исторический период:</label>
        <InputSelect @bind-Value="eventToEdit.TimePeriod.name">
            <option value="">Выберите исторический период</option>
            @foreach (var period in timePeriods)
            {
                <option value="@period.id">@period.name</option>
            }
        </InputSelect>
    </div>

    <div>
        <label>Тип события:</label>
        <InputSelect @bind-Value="eventToEdit.Type.name">
            <option value="">Выберите тип события</option>
            @foreach (var eventType in eventTypes)
            {
                <option value="@eventType.id">@eventType.name</option>
            }
        </InputSelect>
    </div>

    <div>
        <label>Значимость события:</label>
        <InputSelect @bind-Value="eventToEdit.Level.id">
            <option value="">Выберите значимость события</option>
            @foreach (var level in eventLevels)
            {
                <option value="@level.id">@level.name</option>
            }
        </InputSelect>
    </div>

    <h4>Ссылки на дополнительные материалы</h4>
    <button type="button" @onclick="AddUrl">Добавить ссылку</button>
    <ul>
        @foreach (var url in eventToEdit.Urls)
        {
            <li>
                <InputText @bind-Value="url.Name" placeholder="Название ссылки" />
                <InputText @bind-Value="url.Url" placeholder="URL" />
                <button type="button" @onclick="() => RemoveUrl(url)">Удалить</button>
            </li>
        }
    </ul>

   <h4>Регионы</h4>
    <InputSelect @bind-Value="selectedRegionId" @onchange="OnRegionChange">
        <option value="">Выберите регион</option>
        @foreach (var region in availableRegions)
        {
            <option value="@region.id">@region.name</option>
        }
    </InputSelect>
    <button type="button" @onclick="AddRegion">Добавить регион</button>
    <ul>
        @foreach (var region in eventToEdit.Regions)
        {
            <li>
                @region.name
                <button type="button" @onclick="() => RemoveRegion(region)">Удалить</button>
            </li>
        }
    </ul>
    <div>
    <label>Широта:</label>
    <InputNumber @bind-Value="eventToEdit.XCoordiname" />
</div>
<div>
    <label>Долгота:</label>
    <InputNumber @bind-Value="eventToEdit.YCoordiname" />
</div>

    <button type="submit">Сохранить</button>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }
    private EventResponceModel eventToEdit;

    private List<iIdName> timePeriods = new List<iIdName>();
    private List<iIdName> eventTypes = new List<iIdName>();
    private List<iIdName> eventLevels = new List<iIdName>();
    private List<iIdName> availableRegions = new List<iIdName>();
    private int? selectedRegionId;



    protected override async Task OnInitializedAsync()
    {
        timePeriods = await GetHistoryPeriods();
        eventTypes = await GetEventTypes();
        eventLevels = await GetEventLevels();
        availableRegions = await GetRegions();
        var response = await Http.GetAsync($"https://localhost:7019/Event/Get/{Id}");
        var body = await response.Content.ReadAsStringAsync();
        var responseModel = JsonConvert.DeserializeObject<EventMassResponceModel>(body);
        eventToEdit = responseModel.data;
    }

    private async Task HandleValidSubmit()
    {
        var request = new EventRequestModel

            {
                Id = eventToEdit.Id,
                Name = eventToEdit.Name,
                Description = eventToEdit.Description,
                StartedOn = eventToEdit.StartedOn,
                EndedOn = eventToEdit.EndedOn,
                TimePeriodIds = eventToEdit.TimePeriod.id,
                Type = eventToEdit.Type.id,
                Level = eventToEdit.Level.id,
                Urls = eventToEdit.Urls,
                RegionIds = eventToEdit.Regions,
                Regions = eventToEdit.Regions.Select(e => e.id).ToList(),
                XCoordiname = eventToEdit.XCoordiname,
                YCoordiname = eventToEdit.YCoordiname,


            };


        var json = JsonConvert.SerializeObject(request);
        var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"https://localhost:7019/Event/Update", content);
        
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/HistoryEvents");
        }
        else
        {
            // Обработка ошибок
        }
    }
    private async Task<List<iIdName>> GetHistoryPeriods()
    {
        var response = await Http.GetAsync("https://localhost:7019/Spr/GetHistoryPeriods");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }

    private async Task<List<iIdName>> GetEventTypes()
    {
        var response = await Http.GetAsync("https://localhost:7019/Spr/GetEventTypes");
        if (response.IsSuccessStatusCode)
        { var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }

    private async Task<List<iIdName>> GetEventLevels()
    {
        var response = await Http.GetAsync("https://localhost:7019/Spr/GetEventLevels");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }

    private async Task<List<iIdName>> GetRegions()
    {
        var response = await Http.GetAsync("https://localhost:7019/Spr/GetRegions");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responce = JsonConvert.DeserializeObject<SprResponceModel>(json);
            return   responce.data.Select(e => new iIdName { id = e.Key, name = e.Value }).ToList(); 
        }
        return new List<iIdName>();
    }
    private void AddUrl()
    {
        eventToEdit.Urls.Add(new Urls());
    }

    private void RemoveUrl(Urls url)
    {
        eventToEdit.Urls.Remove(url);
    }

     private void AddRegion()
    {
        if (selectedRegionId.HasValue)
        {
            var regionToAdd = availableRegions.FirstOrDefault(r => r.id == selectedRegionId);
            if (regionToAdd != null && !eventToEdit.Regions.Any(r => r.id == regionToAdd.id))
            {
                eventToEdit.Regions.Add(regionToAdd);
            }
        }
    }

    private void RemoveRegion(iIdName region)
    {
        eventToEdit.Regions.Remove(region);
    }

    private void OnRegionChange(ChangeEventArgs e)
    {
        selectedRegionId = int.TryParse(e.Value.ToString(), out var id) ? id : (int?)null;
    }

     public class EventMassResponceModel
{
    public EventResponceModel data { get; set; }
    public string total { get; set; }
    public string result { get; set; }
    public string error { get; set; }
    public string message { get; set; }
}

    public class iIdName
    {
        public int id   { get; set; }
        public string name  { get; set; }

    }

      public class EventRequestModel
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime? StartedOn { get; set; }
        public DateTime? EndedOn { get; set; }
        public int TimePeriodIds { get; set; }
        public int Type { get; set; }
        public int Level { get; set; }
        public List<Urls> Urls { get; set; }
        public List<iIdName> RegionIds { get; set; }
        public List<int> Regions { get; set; }
          public double? XCoordiname { get; set; }
        public double? YCoordiname { get; set; }


    }

     public class ShortUserData
    { 
    public int Id { get; set; } 
    public string FirstName { get; set; }
    public string SecondName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }

    } public class EventResponceModel
    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime? StartedOn { get; set; }
        public DateTime? EndedOn { get; set; }
        public iIdName TimePeriod { get; set; }
        public iIdName Type { get; set; }
        public iIdName Level { get; set; }
        public List<Urls> Urls { get; set; }
        public List<iIdName> Regions { get; set; }
        public DateTime EditOn { get; set; }
        public ShortUserData Author { get; set; }
        public List<string> Ilustrations { get; set; }
        public List<EventComment> Comments { get; set; }
          public double? XCoordiname { get; set; }
        public double? YCoordiname { get; set; }


    }
       public class Urls
    { public int? Id { get; set; }
        public string Url { get; set; }
        public string Name { get; set; }
    }
     public class EventComment {
    public int ? Id { get; set; }
    public string Text { get; set; }
    public string CommentAuthorEmail { get; set; }

    
    }
}