
@page "/HysPerson/{id:int}"
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@*@page "/protected"*@

@attribute [Authorize]

<h3>Сатья о @person.Name</h3>

@if (person == null)
{
    <p>Loading...</p>
}
else
{
    <p>ID: @person.Id</p>
    <p>Имя: @person.Name</p>
    <p>Описание: @person.Description</p>
    <p>Дата рождения: @person.DateOfBirth</p>
    <p>Дата Смерти: @person.DateOfDeath</p>
    <p>Исторический период: @person.TimePeriodName</p>
   <button @onclick="ToggleUrls">@(showUrls ? "Скрыть" : "Показать") Ссылки на доп материалы</button>
    @if (showUrls)
    {
        <ul>
            @foreach (var url in person.Urls)
            {
                <li>@url.Name: <a href="@url.Url" target="_blank">@url.Url</a></li>
            }
        </ul>
    }

    <button @onclick="ToggleRegions">@(showRegions ? "Скрыть" : "Показать") Регионы </button>
    @if (showRegions)
    {
        <ul>
            @foreach (var region in person.Regions)
            {
                <li>@region.name (ID: @region.id)</li>
            }
        </ul>
    }
    <p>Дата последнего изменения статьи: @person.EditOn</p>
    <p>Автор: @person.Author.LastName @person.Author.FirstName  @person.Author.SecondName</p>
    <!-- Другие свойства -->
}

@code {
    [Parameter] public int Id { get; set; }
    private HystoryPerson person;
    private bool showUrls = false;
    private bool showRegions = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {

            var responce = await  Http.GetAsync($"https://localhost:7019/HistoryPersons/Get/{Id}");
            var body  = await responce.Content.ReadAsStringAsync();

            var response = JsonConvert.DeserializeObject<PersonResponceModel>(body);
            person = response.data;
            //var dp = await Http.GetFromJsonAsync<PersonMassResponceModel>($"https://localhost:7019/HistoryPersons/Get/{Id}");
        if (person == null)
        {
            // Логика, если person равен null
            Console.WriteLine("Полученный объект person равен null");
        }
    }
    catch (HttpRequestException e)
    {
        Console.WriteLine($"Ошибка при обращении к API: {e.Message}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Произошла ошибка: {ex.Message}");
    }
    }
    private void ToggleUrls() => showUrls = !showUrls;
    private void ToggleRegions() => showRegions = !showRegions;
    public class PersonResponceModel
{
    public HystoryPerson data { get; set; }
    public string total { get; set; }
    public string result { get; set; }
    public string error { get; set; }
    public string message { get; set; }
}

     
     public class HystoryPerson

    {
        public int? Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public DateTime? DateOfDeath { get; set; }
        public int TimePeriodId { get; set; }
        public string TimePeriodName { get; set; }
        public List<Urls> Urls { get; set; }
        public List<iIdName> Regions { get; set; }
        public DateTime EditOn { get; set; }
        public ShortUserData Author { get; set; }
        public List<string> Ilustrations { get; set; }
        public List<EventComment> Comments { get; set; }


    }
    public class EventComment {
    public int ? Id { get; set; }
    public string Text { get; set; }
    public string CommentAuthorEmail { get; set; }

    
    }
     public class Urls
    { public int? Id { get; set; }
        public string Url { get; set; }
        public string Name { get; set; }
    }
     public class iIdName
    {
        public int id   { get; set; }
        public string name  { get; set; }

    }

     public class ShortUserData
    { 
    public int Id { get; set; } 
    public string FirstName { get; set; }
    public string SecondName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }

    }
}